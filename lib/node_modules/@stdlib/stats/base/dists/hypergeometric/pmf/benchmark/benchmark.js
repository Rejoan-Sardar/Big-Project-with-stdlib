  

'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var round = require( '@stdlib/math/base/special/round' );
var randu = require( '@stdlib/random/base/randu' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pkg = require( './../package.json' ).name;
var pmf = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var N;
	var K;
	var n;
	var x;
	var y;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		x = round( randu()*10.0 );
		N = round( randu()*100.0 );
		K = round( randu()*N );
		n = round( randu()*N );
		y = pmf( x, N, K, n );
		if ( isnan( y ) ) {
			b.fail( 'should not return NaN' );
		}
	}
	b.toc();
	if ( isnan( y ) ) {
		b.fail( 'should not return NaN' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+':factory', function benchmark( b ) {
	var mypmf;
	var N;
	var K;
	var n;
	var x;
	var y;
	var i;

	N = round( randu()*100.0 );
	K = round( randu()*N );
	n = round( randu()*N );
	mypmf = pmf.factory( N, K, n );

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		x = round( randu()*40.0 );
		y = mypmf( x );
		if ( isnan( y ) ) {
			b.fail( 'should not return NaN' );
		}
	}
	b.toc();
	if ( isnan( y ) ) {
		b.fail( 'should not return NaN' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
