  

'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var PINF = require( '@stdlib/constants/float64/pinf' );


// MAIN //

/**
* Returns the variance of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 4.0, 12.0 );
* // returns 32.0
*
* @example
* var v = variance( 8.0, 2.0 );
* // returns ~0.109
*
* @example
* var v = variance( 1.0, 1.0 );
* // returns Infinity
*
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( alpha, beta ) {
	if (
		isnan( alpha ) ||
		alpha <= 0.0 ||
		isnan( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( alpha < 2.0 ) {
		return PINF;
	}
	return ( beta*beta * alpha ) / ( pow( alpha-1.0, 2.0 ) * ( alpha-2.0 ) );
}


// EXPORTS //

module.exports = variance;
