  

'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var gammaPDF = require( '@stdlib/stats/base/dists/gamma/pdf' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.1, 1, 1.0 );
* // returns ~0.905
*
* @example
* var y = pdf( 0.5, 2, 2.5 );
* // returns ~0.895
*
* @example
* var y = pdf( -1.0, 4, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 1, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 1, NaN );
* // returns NaN
*
* @example
* var y = pdf( 2.0, -2, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 0.5, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 0.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 0.0, 0.0, 2.0 );
* // returns Infinity
*
* @example
* var y = pdf( 2.0, 1, 0.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 1, -1.0 );
* // returns NaN
*/
function pdf( x, k, lambda ) {
	if ( !isNonNegativeInteger( k ) ) {
		return NaN;
	}
	return gammaPDF( x, k, lambda );
}


// EXPORTS //

module.exports = pdf;
