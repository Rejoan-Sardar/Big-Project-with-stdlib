  

'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var skewness = require( './../lib' );


// FIXTURES //

var data = require( './fixtures/julia/data.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof skewness, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided `NaN` for `lambda`, the function returns `NaN`', function test( t ) {
	var v = skewness( NaN );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'if provided a mean parameter `lambda` that is not a positive number, the function returns `NaN`', function test( t ) {
	var v;

	v = skewness( -1.0 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = skewness( 0.0 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = skewness( NINF );
	t.equal( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns the skewness of a Poisson distribution', function test( t ) {
	var expected;
	var lambda;
	var i;
	var y;

	expected = data.expected;
	lambda = data.lambda;
	for ( i = 0; i < expected.length; i++ ) {
		y = skewness( lambda[i] );
		t.equal( y, expected[i], 'lambda: '+lambda[i]+', y: '+y+', expected: '+expected[i] );
	}
	t.end();
});
