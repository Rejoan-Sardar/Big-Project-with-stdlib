  

'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var factorialln = require( '@stdlib/math/base/special/factorialln' );
var degenerate = require( '@stdlib/stats/base/dists/degenerate/logpmf' ).factory;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var PINF = require( '@stdlib/constants/float64/pinf' );


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda`.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Function} logPMF
*
* @example
* var logpmf = factory( 1.0 );
* var y = logpmf( 3.0 );
* // returns ~-2.792
*
* y = logpmf( 1.0 );
* // returns ~-1.0
*/
function factory( lambda ) {
	if ( isnan( lambda ) || lambda < 0.0 ) {
		return constantFunction( NaN );
	}
	if ( lambda === 0.0 ) {
		return degenerate( 0.0 );
	}
	return logpmf;

	/**
	* Evaluates the natural logarithm of the probability mass function (PMF) for a Poisson distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPMF
	*
	* @example
	* var y = logpmf( 2.0 );
	* // returns <number>
	*/
	function logpmf( x ) {
		if ( isnan( x ) ) {
			return NaN;
		}
		if ( isNonNegativeInteger( x ) && x !== PINF ) {
			return ( x * ln( lambda ) ) - lambda - factorialln( x );
		}
		return NINF;
	}
}


// EXPORTS //

module.exports = factory;
