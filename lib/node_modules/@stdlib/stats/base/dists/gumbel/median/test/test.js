  

'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var EPS = require( '@stdlib/constants/float64/eps' );
var median = require( './../lib' );


// FIXTURES //

var data = require( './fixtures/julia/data.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof median, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided `NaN` for any parameter, the function returns `NaN`', function test( t ) {
	var y = median( NaN, 1.0 );
	t.equal( isnan( y ), true, 'returns NaN' );
	y = median( 1.0, NaN );
	t.equal( isnan( y ), true, 'returns NaN' );
	t.end();
});

tape( 'if provided a nonpositive `beta`, the function returns `NaN`', function test( t ) {
	var y;

	y = median( 2.0, 0.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = median( 2.0, -1.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = median( 2.0, -1.0 );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = median( 1.0, NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = median( PINF, NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = median( NINF, NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	y = median( NaN, NINF );
	t.equal( isnan( y ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns the median of a Gumbel distribution', function test( t ) {
	var expected;
	var delta;
	var beta;
	var tol;
	var mu;
	var y;
	var i;

	expected = data.expected;
	mu = data.mu;
	beta = data.beta;
	for ( i = 0; i < mu.length; i++ ) {
		y = median( mu[i], beta[i] );
		if ( expected[i] !== null) {
			if ( y === expected[i] ) {
				t.equal( y, expected[i], 'mu:'+mu[i]+', beta: '+beta[i]+', y: '+y+', expected: '+expected[i] );
			} else {
				delta = abs( y - expected[ i ] );
				tol = 2.0 * EPS * abs( expected[ i ] );
				t.ok( delta <= tol, 'within tolerance. mu: '+mu[i]+'. beta: '+beta[i]+'. y: '+y+'. E: '+expected[ i ]+'. Î”: '+delta+'. tol: '+tol+'.' );
			}
		}
	}
	t.end();
});
