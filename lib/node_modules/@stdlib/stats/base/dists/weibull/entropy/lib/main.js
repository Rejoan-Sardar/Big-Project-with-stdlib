  

'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var ln = require( '@stdlib/math/base/special/ln' );
var GAMMA = require( '@stdlib/constants/float64/eulergamma' );


// MAIN //

/**
* Returns the differential entropy of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} entropy
*
* @example
* var v = entropy( 1.0, 1.0 );
* // returns 1.0
*
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~2.532
*
* @example
* var v = entropy( 8.0, 2.0 );
* // returns ~0.119
*
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
*
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( k, lambda ) {
	if (
		isnan( k ) ||
		isnan( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return ( GAMMA * ( 1.0 - (1.0/k) ) ) + ln( lambda/k ) + 1.0;
}


// EXPORTS //

module.exports = entropy;
