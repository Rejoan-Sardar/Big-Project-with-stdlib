  

'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );


// MAIN //

/**
* Evaluates the moment-generating function (MGF) of a uniform distribution with minimum support `a` and maximum support `b` at a value `t`.
*
* @param {number} t - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 2.0, 0.0, 4.0 );
* // returns ~372.495
*
* @example
* var y = mgf( -0.2, 0.0, 4.0 );
* // returns ~0.688
*
* @example
* var y = mgf( 2.0, 0.0, 1.0 );
* // returns ~3.195
*
* @example
* var y = mgf( 0.5, 3.0, 2.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.5, 3.0, 3.0 );
* // returns NaN
*
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
*/
function mgf( t, a, b ) {
	var ret;
	if (
		isnan( t ) ||
		isnan( a ) ||
		isnan( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( t === 0.0 ) {
		return 1.0;
	}
	// Case: t not equal to zero
	ret = exp( t * b ) - exp( t * a );
	ret /= t * ( b - a );
	return ret;
}


// EXPORTS //

module.exports = mgf;
