#!/usr/bin/env node

  

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var repl = require( './../lib' );


// VARIABLES //

var MSG = [
	'',
	'A better REPL for Node.js.',
	'',
	'    help( alias )        Prints help text.',
	'    example( alias )     Runs examples.',
	'    alias2pkg( alias )   Converts an alias to a stdlib package name.',
	'    pkg2alias( pkg )     Converts a stdlib package name to an alias.',
	'    namespace()          Lists namespace contents.',
	'',
	'For more info about stdlib, see the source repository:',
	'',
	'  https://github.com/stdlib-js/stdlib',
	''
].join( '\n' );


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var flags;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	console.log( MSG ); // eslint-disable-line no-console
	repl( onStart );

	/**
	* Callback invoked upon starting a REPL.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {REPL} r - REPL instance
	* @returns {void}
	*/
	function onStart( error ) {
		if ( error ) {
			return cli.error( error );
		}
	}
}

main();
