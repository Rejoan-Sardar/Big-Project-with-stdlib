  'use strict';

// MODULES //

var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );
var isnanf = require( '@stdlib/math/base/assert/is-nanf' );
var isInfinitef = require( '@stdlib/math/base/assert/is-infinitef' );
var PINF = require( '@stdlib/constants/float32/pinf' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Computes the hypotenuse avoiding overflow and underflow (single-precision).
*
* @param {number} x - number
* @param {number} y - number
* @returns {number} hypotenuse
*
* @example
* var h = hypotf( -5.0, 12.0 );
* // returns 13.0
*
* @example
* var h = hypotf( NaN, 12.0 );
* // returns NaN
*
* @example
* var h = hypotf( -0.0, -0.0 );
* // returns 0.0
*/
function hypotf( x, y ) {
	var tmp;
	if ( isnanf( x ) || isnanf( y ) ) {
		return NaN;
	}
	if ( isInfinitef( x ) || isInfinitef( y ) ) {
		return PINF;
	}
	x = float64ToFloat32( x );
	y = float64ToFloat32( y );
	if ( x < 0.0 ) {
		x = -x;
	}
	if ( y < 0.0 ) {
		y = -y;
	}
	if ( x < y ) {
		tmp = y;
		y = x;
		x = tmp;
	}
	if ( x === 0.0 ) {
		return 0.0;
	}
	y = float64ToFloat32( y / x );
	return float64ToFloat32( x * float64ToFloat32( sqrt( float64ToFloat32( 1.0 + float64ToFloat32(y*y) ) ) ) ); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = hypotf;
