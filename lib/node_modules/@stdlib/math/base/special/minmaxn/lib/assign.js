  

'use strict';

// MODULES //

var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
var isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var PINF = require( '@stdlib/constants/float64/pinf' );


// MAIN //

/**
* Returns the minimum and maximum values and assigns results to a provided output array.
*
* @private
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {Collection} out - output array
* @param {integer} stride - output array stride
* @param {NonNegativeInteger} offset - output array index offset
* @returns {Collection} minimum and maximum values
*
* @example
* var out = [ 0.0, 0.0 ];
* var v = minmaxn( 3.14, 4.2, out, 1, 0 );
* // returns [ 3.14, 4.2 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var out = [ 0.0, 0.0 ];
* var v = minmaxn( 5.9, 3.14, 4.2, out, 1, 0 );
* // returns [ 3.14, 5.9 ]
*
* @example
* var out = [ 0.0, 0.0 ];
* var v = minmaxn( 3.14, NaN, out, 1, 0 );
* // returns [ NaN, NaN ]
*
* @example
* var out = [ 0.0, 0.0 ];
* var v = minmaxn( +0.0, -0.0, out, 1, 0 );
* // returns [ -0.0, 0.0 ]
*/
function minmaxn( x, y, out, stride, offset ) {
	var len;
	var min;
	var max;
	var v;
	var i;

	len = arguments.length;

	out = arguments[ len - 3 ];
	stride = arguments[ len - 2 ];
	offset = arguments[ len - 1 ];

	if ( len === 4 ) {
		out[ offset ] = x;
		out[ offset + stride ] = x;
		return out;
	}
	if ( len === 5 ) {
		if ( isnan( x ) || isnan( y ) ) {
			out[ offset ] = NaN;
			out[ offset + stride ] = NaN;
			return out;
		}
		if ( x === y && x === 0.0 ) {
			if ( isNegativeZero( x ) ) {
				out[ offset ] = x;
				out[ offset + stride ] = y;
				return out;
			}
			out[ offset ] = y;
			out[ offset + stride ] = x;
			return out;
		}
		if ( x < y ) {
			out[ offset ] = x;
			out[ offset + stride ] = y;
			return out;
		}
		out[ offset ] = y;
		out[ offset + stride ] = x;
		return out;
	}
	min = PINF;
	max = NINF;
	for ( i = 0; i < len - 3; i++ ) {
		v = arguments[ i ];
		if ( isnan( v ) ) {
			out[ offset ] = NaN;
			out[ offset + stride ] = NaN;
			return out;
		}
		if ( v < min ) {
			min = v;
		} else if (
			v === 0.0 &&
			v === min &&
			isNegativeZero( v )
		) {
			min = v;
		}
		if ( v > max ) {
			max = v;
		} else if (
			v === 0.0 &&
			v === max &&
			isPositiveZero( v )
		) {
			max = v;
		}
	}
	out[ offset ] = min;
	out[ offset + stride ] = max;
	return out;
}


// EXPORTS //

module.exports = minmaxn;
