  

'use strict';

// MODULES //

var Complex128 = require( '@stdlib/complex/float64/ctor' );
var real = require( '@stdlib/complex/float64/real' );
var imag = require( '@stdlib/complex/float64/imag' );
var cabs = require( '@stdlib/math/base/special/cabs' );


// MAIN //

/**
* Evaluates the signum function of a double-precision floating-point complex number.
*
* @param {Complex128} z - complex number
* @returns {Complex128} result
*
* @example
* var Complex128 = require( '@stdlib/complex/float64/ctor' );
* var real = require( '@stdlib/complex/float64/real' );
* var imag = require( '@stdlib/complex/float64/imag' );
*
* var v = csignum( new Complex128( -4.2, 5.5 ) );
* // returns <Complex128>
*
* var re = real( v );
* // returns -0.6069136033622302
*
* var im = imag( v );
* // returns 0.79476781392673
*
* v = csignum( new Complex128( 0.0, 0.0 ) );
* // returns <Complex128>
*
* re = real( v );
* // returns -0.0
*
* im = imag( v );
* // returns 0.0
*
* v = csignum( new Complex128( NaN, NaN ) );
* // returns <Complex128>
*
* re = real( v );
* // returns NaN
*
* im = imag( v );
* // returns NaN
*/
function csignum( z ) {
	var re;
	var im;
	var az;

	az = cabs( z );
	if ( az === 0.0 ) {
		return z;
	}
	re = real( z ) / az;
	im = imag( z ) / az;
	return new Complex128( re, im );
}


// EXPORTS //

module.exports = csignum;
