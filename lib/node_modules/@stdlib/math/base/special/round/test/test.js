  

'use strict';

// MODULES //

var tape = require( 'tape' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
var round = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof round, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function rounds a numeric value to the nearest integer', function test( t ) {
	t.strictEqual( round( -4.2 ), -4.0, 'equals -4' );
	t.strictEqual( round( -4.5 ), -4.0, 'equals -4' );
	t.strictEqual( round( -4.8 ), -5.0, 'equals -5' );
	t.strictEqual( round( 4.2 ), 4.0, 'equals 4' );
	t.strictEqual( round( 4.5 ), 5.0, 'equals 5' );
	t.strictEqual( round( 9.99999 ), 10.0, 'equals 10' );
	t.strictEqual( round( 9.5 ), 10.0, 'equals 10' );
	t.strictEqual( round( 9.4 ), 9.0, 'equals 10' );
	t.strictEqual( round( 0.0 ), 0.0, 'equals 0' );
	t.end();
});

tape( 'the function returns `-0` if provided `-0`', function test( t ) {
	var v = round( -0.0 );
	t.strictEqual( isNegativeZero( v ), true, 'returns -0' );
	t.end();
});

tape( 'the function returns `NaN` if provided a `NaN`', function test( t ) {
	var v = round( NaN );
	t.strictEqual( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `+infinity` if provided a `+infinity`', function test( t ) {
	var v = round( PINF );
	t.strictEqual( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `-infinity` if provided a `-infinity`', function test( t ) {
	var v = round( NINF );
	t.strictEqual( v, NINF, 'returns -infinity' );
	t.end();
});

tape( 'the function returns the correct result for large positive non-decimal values', function test( t ) {
	var start = 4503599627370496;
	var end = 4503599627375000;
	var i;

	for ( i = start; i < end; i++ ) {
		t.strictEqual( round( i ), i, 'returns '+i );
	}
	t.end();
});

tape( 'the function returns the correct result for large negative non-decimal values', function test( t ) {
	var start = -4503599627375000;
	var end = -4503599627370496;
	var i;

	for ( i = start; i < end; i++ ) {
		t.strictEqual( round( i ), i, 'returns '+i );
	}
	t.end();
});
