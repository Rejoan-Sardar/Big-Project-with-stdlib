  'use strict';

// MODULES //

var tape = require( 'tape' );
var isPositiveZerof = require( '@stdlib/math/base/assert/is-positive-zerof' );
var isnanf = require( '@stdlib/math/base/assert/is-nanf' );
var PINF = require( '@stdlib/constants/float32/pinf' );
var NINF = require( '@stdlib/constants/float32/ninf' );
var abs2f = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof abs2f, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function computes the squared absolute value of a number', function test( t ) {
	t.strictEqual( abs2f( -2.0 ), 4.0, 'negative number' );
	t.strictEqual( abs2f( 3.0 ), 9.0, 'positive number' );
	t.strictEqual( abs2f( 0.0 ), 0.0, 'zero' );
	t.end();
});

tape( 'the function computes the squared absolute value of negative zero', function test( t ) {
	t.strictEqual( isPositiveZerof( abs2f( -0.0 ) ), true, 'returns positive zero' );
	t.end();
});

tape( 'the function computes the squared absolute value of infinity', function test( t ) {
	t.strictEqual( abs2f( PINF ), PINF, 'returns +infinity' );
	t.strictEqual( abs2f( NINF ), PINF, 'returns +infinity' );
	t.end();
});

tape( 'if provided `NaN`, the function returns `NaN`', function test( t ) {
	var v = abs2f( NaN );
	t.strictEqual( isnanf( v ), true, 'returns NaN' );
	t.end();
});
