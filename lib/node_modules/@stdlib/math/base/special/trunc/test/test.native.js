  'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
var isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );
var tryRequire = require( '@stdlib/utils/try-require' );


// VARIABLES //

var trunc = tryRequire( resolve( __dirname, './../lib/native.js' ) );
var opts = {
	'skip': ( trunc instanceof Error )
};


// TESTS //

tape( 'main export is a function', opts, function test( t ) {
	t.ok( true, __filename );
	t.true( typeof trunc, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function rounds a numeric value toward 0', opts, function test( t ) {
	t.strictEqual( trunc( -4.2 ), -4.0, 'equals -4' );
	t.strictEqual( trunc( 9.99999 ), 9.0, 'equals 9' );
	t.end();
});

tape( 'if provided `+0`, the function returns `+0`', opts, function test( t ) {
	var v = trunc( 0.0 );
	t.strictEqual( isPositiveZero( v ), true, 'equals +0' );
	t.end();
});

tape( 'if provided `-0`, the function returns `-0`', opts, function test( t ) {
	var v = trunc( -0.0 );
	t.strictEqual( isNegativeZero( v ), true, 'returns -0' );
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN`', opts, function test( t ) {
	var v = trunc( NaN );
	t.strictEqual( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `+infinity` if provided `+infinity`', opts, function test( t ) {
	var v = trunc( PINF );
	t.strictEqual( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `-infinity` if provided `-infinity`', opts, function test( t ) {
	var v = trunc( NINF );
	t.strictEqual( v, NINF, 'returns -infinity' );
	t.end();
});
