  

'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );


// MAIN //

/**
* Returns the minimum and maximum absolute values.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @param {Collection} out - output object
* @param {integer} stride - output array stride
* @param {NonNegativeInteger} offset - output array index offset
* @returns {Collection} minimum and maximum absolute values
*
* @example
* var out = [ 0.0, 0.0 ];
* var v = minmaxabs( 3.14, 4.2, out, 1, 0 );
* // returns [ 3.14, 4.2 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var out = [ 0.0, 0.0 ];
* var v = minmaxabs( -5.9, 3.14, out, 1, 0 );
* // returns [ 3.14, 5.9 ]
*
* @example
* var out = [ 0.0, 0.0 ];
* var v = minmaxabs( 3.14, NaN, out, 1, 0 );
* // returns [ NaN, NaN ]
*
* @example
* var out = [ 0.0, 0.0 ];
* var v = minmaxabs( +0.0, -0.0, out, 1, 0 );
* // returns [ 0.0, 0.0 ]
*/
function minmaxabs( x, y, out, stride, offset ) {
	var ax;
	var ay;

	if ( isnan( x ) || isnan( y ) ) {
		out[ offset ] = NaN;
		out[ offset + stride ] = NaN;
		return out;
	}
	ax = abs( x );
	ay = abs( y );
	if ( ax < ay ) {
		out[ offset ] = ax;
		out[ offset + stride ] = ay;
		return out;
	}
	out[ offset ] = ay;
	out[ offset + stride ] = ax;
	return out;
}


// EXPORTS //

module.exports = minmaxabs;
