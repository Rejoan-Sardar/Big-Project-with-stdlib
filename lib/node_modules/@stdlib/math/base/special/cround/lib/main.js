  

'use strict';

// MODULES //

var Complex128 = require( '@stdlib/complex/float64/ctor' );
var round = require( '@stdlib/math/base/special/round' );
var real = require( '@stdlib/complex/float64/real' );
var imag = require( '@stdlib/complex/float64/imag' );


// MAIN //

/**
* Rounds each component of a double-precision complex floating-point number to the nearest integer.
*
* @param {Complex128} z - complex number
* @returns {Complex128} rounded complex number
*
* @example
* var Complex128 = require( '@stdlib/complex/float64/ctor' );
* var real = require( '@stdlib/complex/float64/real' );
* var imag = require( '@stdlib/complex/float64/imag' );
*
* var v = cround( new Complex128( -4.2, 5.5 ) );
* // returns <Complex128>
*
* var re = real( v );
* // returns -4
*
* var im = imag( v );
* // returns 6.0
*
* v = cround( new Complex128( 9.99999, 0.1 ) );
* // returns <Complex128>
*
* re = real( v );
* // returns 10.0
*
* im = imag( v );
* // returns 0.0
*
* v = cround( new Complex128( 0.0, 0.0 ) );
* // returns <Complex128>
*
* re = real( v );
* // returns 0.0
*
* im = imag( v );
* // returns 0.0
*
* v = cround( new Complex128( NaN, NaN ) );
* // returns <Complex128>
*
* re = real( v );
* // returns NaN
*
* im = imag( v );
* // returns NaN
*/
function cround( z ) {
	return new Complex128( round( real( z ) ), round( imag( z ) ) );
}


// EXPORTS //

module.exports = cround;
