  

'use strict';

// MODULES //

var expm1 = require( '@stdlib/math/base/special/expm1' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var abs = require( '@stdlib/math/base/special/abs' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Computes the inverse of a one-parameter Box-Cox transformation for `1+x`.
*
* @param {number} y - input value
* @param {number} lambda - power parameter
* @returns {number} inverse of the Box-Cox transformation
*
* @example
* var v = boxcox1pinv( 1.0, 2.5 );
* // returns ~0.6505
*
* @example
* var v = boxcox1pinv( 4.0, 2.5 );
* // returns ~1.6095
*
* @example
* var v = boxcox1pinv( 10.0, 2.5 );
* // returns ~2.6812
*
* @example
* var v = boxcox1pinv( 2.0, 0.0 );
* // returns ~6.3891
*
* @example
* var v = boxcox1pinv( -1.0, 2.5 );
* // returns NaN
*
* @example
* var v = boxcox1pinv( 0.0, -1.0 );
* // returns 0.0
*
* @example
* var v = boxcox1pinv( 1.0, NaN );
* // returns NaN
*
* @example
* var v = boxcox1pinv( NaN, 3.1 );
* // returns NaN
*/
function boxcox1pinv( y, lambda ) {
	var ly;
	if ( isnan( y ) || isnan( lambda ) ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return expm1( y );
	}
	ly = lambda * y;
	if ( abs( ly ) < 1.0e-154 ) {
		return y;
	}
	return expm1( log1p( ly ) / lambda );
}


// EXPORTS //

module.exports = boxcox1pinv;
