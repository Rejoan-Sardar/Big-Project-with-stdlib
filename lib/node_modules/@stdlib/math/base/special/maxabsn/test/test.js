  

'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var maxabsn = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof maxabsn, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `NaN` if provided a `NaN`', function test( t ) {
	var v;

	v = maxabsn( NaN, 3.14 );
	t.strictEqual( isnan( v ), true, 'returns NaN' );

	v = maxabsn( 3.14, NaN );
	t.strictEqual( isnan( v ), true, 'returns NaN' );

	v = maxabsn( NaN );
	t.strictEqual( isnan( v ), true, 'returns NaN' );

	v = maxabsn( 3.14, 4.2, NaN );
	t.strictEqual( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns `+Infinity` if provided `+Infinity`', function test( t ) {
	var v;

	v = maxabsn( PINF, 3.14 );
	t.strictEqual( v, PINF, 'returns +infinity' );

	v = maxabsn( 3.14, PINF );
	t.strictEqual( v, PINF, 'returns +infinity' );

	v = maxabsn( PINF );
	t.strictEqual( v, PINF, 'returns +infinity' );

	v = maxabsn( 3.14, 4.2, PINF );
	t.strictEqual( v, PINF, 'returns +infinity' );

	t.end();
});

tape( 'the function returns `+infinity` if not provided any arguments', function test( t ) {
	var v = maxabsn();
	t.strictEqual( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns a correctly signed zero', function test( t ) {
	var v;

	v = maxabsn( +0.0, -0.0 );
	t.strictEqual( isPositiveZero( v ), true, 'returns +0' );

	v = maxabsn( -0.0, +0.0 );
	t.strictEqual( isPositiveZero( v ), true, 'returns +0' );

	v = maxabsn( -0.0, -0.0 );
	t.strictEqual( isPositiveZero( v ), true, 'returns +0' );

	v = maxabsn( +0.0, +0.0 );
	t.strictEqual( isPositiveZero( v ), true, 'returns +0' );

	v = maxabsn( -0.0 );
	t.strictEqual( isPositiveZero( v ), true, 'returns +0' );

	v = maxabsn( +0.0 );
	t.strictEqual( isPositiveZero( v ), true, 'returns +0' );

	v = maxabsn( +0.0, -0.0, +0.0 );
	t.strictEqual( isPositiveZero( v ), true, 'returns +0' );

	t.end();
});

tape( 'the function returns the maximum absolute value', function test( t ) {
	var v;

	v = maxabsn( 4.2, 3.14 );
	t.strictEqual( v, 4.2, 'returns expected value' );

	v = maxabsn( -4.2, 3.14 );
	t.strictEqual( v, 4.2, 'returns expected value' );

	v = maxabsn( 3.14 );
	t.strictEqual( v, 3.14, 'returns expected value' );

	v = maxabsn( NINF );
	t.strictEqual( v, PINF, 'returns expected value' );

	v = maxabsn( 4.2, 3.14, -1.0 );
	t.strictEqual( v, 4.2, 'returns expected value' );

	v = maxabsn( 3.14, 4.2, -1.0, -3.14 );
	t.strictEqual( v, 4.2, 'returns expected value' );

	v = maxabsn( 3.14, -4.2, -1.0, -3.14 );
	t.strictEqual( v, 4.2, 'returns expected value' );

	t.end();
});
