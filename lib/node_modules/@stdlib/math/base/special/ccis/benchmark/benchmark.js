  

'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var uniform = require( '@stdlib/random/base/uniform' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var real = require( '@stdlib/complex/float64/real' );
var imag = require( '@stdlib/complex/float64/imag' );
var Complex128 = require( '@stdlib/complex/float64/ctor' );
var pkg = require( './../package.json' ).name;
var ccis = require( './../lib' );


// MAIN //

bench( pkg, function benchmark( b ) {
	var values;
	var y;
	var i;

	values = [
		new Complex128( uniform( -50.0, 50.0 ), uniform( -50.0, 50.0 ) ),
		new Complex128( uniform( -50.0, 50.0 ), uniform( -50.0, 50.0 ) )
	];

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		y = ccis( values[ i%values.length ] );
		if ( isnan( real( y ) ) ) {
			b.fail( 'should not return NaN' );
		}
	}
	b.toc();
	if ( isnan( imag( y ) ) ) {
		b.fail( 'should not return NaN' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
