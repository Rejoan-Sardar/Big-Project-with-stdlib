  

'use strict';

/**
* Round a double-precision floating-point complex number toward negative infinity.
*
* @module @stdlib/math/base/special/cfloor
*
* @example
* var Complex128 = require( '@stdlib/complex/float64/ctor' );
* var real = require( '@stdlib/complex/float64/real' );
* var imag = require( '@stdlib/complex/float64/imag' );
* var cfloor = require( '@stdlib/math/base/special/cfloor' );
*
* var v = cfloor( new Complex128( -4.2, 5.5 ) );
* // returns <Complex128>
*
* var re = real( v );
* // returns -5.0
*
* var im = imag( v );
* // returns 5.0
*
* @example
* var Complex128 = require( '@stdlib/complex/float64/ctor' );
* var real = require( '@stdlib/complex/float64/real' );
* var imag = require( '@stdlib/complex/float64/imag' );
* var cfloor = require( '@stdlib/math/base/special/cfloor' );
*
* var v = cfloor( new Complex128( 9.99999, 0.1 ) );
* // returns <Complex128>
*
* var re = real( v );
* // returns 9.0
*
* var im = imag( v );
* // returns 0.0
*
* @example
* var Complex128 = require( '@stdlib/complex/float64/ctor' );
* var real = require( '@stdlib/complex/float64/real' );
* var imag = require( '@stdlib/complex/float64/imag' );
* var cfloor = require( '@stdlib/math/base/special/cfloor' );
*
* var v = cfloor( new Complex128( 0.0, 0.0 ) );
* // returns <Complex128>
*
* var re = real( v );
* // returns 0.0
*
* var im = imag( v );
* // returns 0.0
*
* @example
* var Complex128 = require( '@stdlib/complex/float64/ctor' );
* var real = require( '@stdlib/complex/float64/real' );
* var imag = require( '@stdlib/complex/float64/imag' );
* var cfloor = require( '@stdlib/math/base/special/cfloor' );
*
* var v = cfloor( new Complex128( NaN, NaN ) );
* // returns <Complex128>
*
* var re = real( v );
* // returns NaN
*
* var im = imag( v );
* // returns NaN
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;
