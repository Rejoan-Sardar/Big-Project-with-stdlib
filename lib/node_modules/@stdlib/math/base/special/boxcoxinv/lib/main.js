  

'use strict';

// MODULES //

var exp = require( '@stdlib/math/base/special/exp' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Computes the inverse of a one-parameter Box-Cox transformation.
*
* @param {number} y - input value
* @param {number} lambda - power parameter
* @returns {number} inverse of the Box-Cox transformation
*
* @example
* var v = boxcoxinv( 1.0, 2.5 );
* // returns ~1.6505
*
* @example
* var v = boxcoxinv( 4.0, 2.5 );
* // returns ~2.6095
*
* @example
* var v = boxcoxinv( 10.0, 2.5 );
* // returns ~3.6812
*
* @example
* var v = boxcoxinv( 2.0, 0.0 );
* // returns ~7.3891
*
* @example
* var v = boxcoxinv( -1.0, 2.5 );
* // returns NaN
*
* @example
* var v = boxcoxinv( 0.0, -1.0 );
* // returns 1.0
*
* @example
* var v = boxcoxinv( 1.0, NaN );
* // returns NaN
*
* @example
* var v = boxcoxinv( NaN, 3.1 );
* // returns NaN
*/
function boxcoxinv( y, lambda ) {
	if ( isnan( y ) || isnan( lambda ) ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return exp( y );
	}
	return exp( log1p( lambda*y ) / lambda );
}


// EXPORTS //

module.exports = boxcoxinv;
