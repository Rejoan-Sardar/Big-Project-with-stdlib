  

'use strict';

// MODULES //

var Complex128 = require( '@stdlib/complex/float64/ctor' );
var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
var real = require( '@stdlib/complex/float64/real' );
var imag = require( '@stdlib/complex/float64/imag' );


// MAIN //

/**
* Returns a double-precision complex floating-point number with the same magnitude as `z` and the sign of `y*z`.
*
* @param {Complex128} z - complex number
* @param {number} y - number from which to derive the sign
* @returns {Complex128} result
*
* @example
* var Complex128 = require( '@stdlib/complex/float64/ctor' );
* var real = require( '@stdlib/complex/float64/real' );
* var imag = require( '@stdlib/complex/float64/imag' );
*
* var v = cflipsign( new Complex128( -4.2, 5.5 ), -55.0 );
* // returns <Complex128>
*
* var re = real( v );
* // returns 4.2
*
* var im = imag( v );
* // returns -5.5
*/
function cflipsign( z, y ) {
	var re = real( z );
	var im = imag( z );
	if ( y < 0 || isNegativeZero( y ) ) {
		re = -re;
		im = -im;
	}
	return new Complex128( re, im );
}


// EXPORTS //

module.exports = cflipsign;
