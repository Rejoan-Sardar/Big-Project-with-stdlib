  'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var isPositiveZerof = require( '@stdlib/math/base/assert/is-positive-zerof' );
var isnanf = require( '@stdlib/math/base/assert/is-nanf' );
var PINF = require( '@stdlib/constants/float32/pinf' );
var NINF = require( '@stdlib/constants/float32/ninf' );
var tryRequire = require( '@stdlib/utils/try-require' );


// VARIABLES //

var absf = tryRequire( resolve( __dirname, './../lib/native.js' ) );
var opts = {
	'skip': ( absf instanceof Error )
};


// TESTS //

tape( 'main export is a function', opts, function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof absf, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function computes the absolute value of a number', opts, function test( t ) {
	t.equal( absf( -2.0 ), 2.0, 'negative number' );
	t.equal( absf( 3.0 ), 3.0, 'positive number' );
	t.equal( absf( 0.0 ), 0.0, 'zero' );
	t.end();
});

tape( 'the function computes the absolute value of negative zero', opts, function test( t ) {
	t.equal( isPositiveZerof( absf( -0.0 ) ), true, 'returns positive zero' );
	t.end();
});

tape( 'the function computes the absolute value of infinity', opts, function test( t ) {
	t.equal( absf( PINF ), PINF, 'returns +infinity' );
	t.equal( absf( NINF ), PINF, 'returns +infinity' );
	t.end();
});

tape( 'if provided `NaN`, the function returns `NaN`', opts, function test( t ) {
	var v = absf( NaN );
	t.equal( isnanf( v ), true, 'returns NaN' );
	t.end();
});
