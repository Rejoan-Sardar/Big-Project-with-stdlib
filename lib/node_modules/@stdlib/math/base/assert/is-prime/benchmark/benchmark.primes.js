  'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var pow = require( '@stdlib/math/base/special/pow' );
var log10 = require( '@stdlib/math/base/special/log10' );
var floor = require( '@stdlib/math/base/special/floor' );
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var pkg = require( './../package.json' ).name;
var PRIMES = require( './../test/fixtures/primes.js' );
var isPrime = require( './../lib' );


// FUNCTIONS //

/**
* Creates a benchmark function.
*
* @private
* @param {PositiveInteger} prime - prime number
* @returns {Function} benchmark function
*/
function createBenchmark( prime ) {
	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var bool;
		var i;

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			bool = isPrime( prime );
			if ( typeof bool !== 'boolean' ) {
				b.fail( 'should return a boolean' );
			}
		}
		b.toc();
		if ( !isBoolean( bool ) ) {
			b.fail( 'should return a boolean' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	}
}


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var min;
	var max;
	var f;
	var p;
	var i;
	var j;

	min = 1; // 10^min
	max = floor( log10( PRIMES.length ) ); // 10^max

	for ( i = min; i <= max; i++ ) {
		j = pow( 10, i ) - 1;
		p = PRIMES[ j ];
		f = createBenchmark( p );
		bench( pkg+':prime='+p, f );
	}
}

main();
